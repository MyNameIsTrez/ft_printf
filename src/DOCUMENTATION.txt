
////////////////////////////////////////////////////////////////////////////////

/*

////////////////////////////////////////////////////////////////////////////////

      +-----+-----+-----+-----+-----+-----+
      | '-' | '0' | '.' | '#' | ' ' | '+' |
+-----+-----+-----+-----+-----+-----+-----+
| 'c' |     | UB  | [1] | UB  | UB  | UB  |
+-----+-----+-----+-----+-----+-----+-----+
| 'p' |     | UB  | [1] | UB  | UB  | UB  |
+-----+-----+-----+-----+-----+-----+-----+
| 's' |     | UB  | [2] | UB  | UB  | UB  |
+-----+-----+-----+-----+-----+-----+-----+
| 'd' |     |     |     | UB  |     |     |
+-----+-----+-----+-----+-----+-----+-----+
| 'i' |     |     |     | UB  |     |     |
+-----+-----+-----+-----+-----+-----+-----+
| 'u' |     |     |     | UB  | UB  | UB  |
+-----+-----+-----+-----+-----+-----+-----+
| 'x' |     |     |     | [3] | UB  | UB  |
+-----+-----+-----+-----+-----+-----+-----+
| 'X' |     |     |     | [3] | UB  | UB  |
+-----+-----+-----+-----+-----+-----+-----+
| '%' | [4] | [4] | DN  | DN  | DN  | DN  |
+-----+-----+-----+-----+-----+-----+-----+

////////////////////////////////////////////////////////////////////////////////

An empty space stands for it doing something and being Defined Behavior
UB stands for Undefined Behavior and should make printf return a negative value
DN stands for Does Nothing, but is NOT Undefined Behavior

////////////////////////////////////////////////////////////////////////////////
// Examples

// Normal
printf("'%d'\n"  ,  123) -> '123'
printf("'%d'\n"  , -123) -> '-123'

// Minimum field width
printf("'%5d'\n" ,  123) -> '  123'
printf("'%5d'\n" , -123) -> ' -123'

// '-'
printf("'%-d'\n" ,  123) -> '123'
printf("'%-5d'\n",  123) -> '123  '
printf("'%-5d'\n", -123) -> '-123 '

// '+'
printf("'%+d'\n" ,  123) -> '+123'
printf("'%+5d'\n",  123) -> ' +123'
printf("'%+5d'\n", -123) -> ' -123'

// ' '
printf("'% d'\n" ,  123) -> ' 123'
printf("'% 5d'\n",  123) -> '  123'
printf("'% 5d'\n", -123) -> ' -123'

// '0'
printf("'%0d'\n" ,  123) -> '123'
printf("'%05d'\n",  123) -> '00123'
printf("'%05d'\n", -123) -> '-0123'

// '.'
printf("'%.2d'\n" , 123) -> '123'
printf("'%.5d'\n" , 123) -> '00123'
printf("'%0.5d'\n", 123) -> '00123'
printf("'%+.5d'\n", 123) -> '+00123'

////////////////////////////////////////////////////////////////////////////////
// Notes

' ' is ignored when '+' is present
'0' is ignored when '-' is present

Conversion specifiers (cpsdiuxX%) can occur multiple times in a format string:
printf("'%++d'\n", 123) -> '+123'

////////////////////////////////////////////////////////////////////////////////

Cells in the table that contain [number] are explained below:

////////////////////////////////////////////////////////////////////////////////
// [1]

'c' and 'p' only have UB with '.' when a precision number is also specified:

printf("'%c'\n"  , 0) -> '' (unprintable character)
printf("'%.c'\n" , 0) -> ''
printf("'%.0c'\n", 0) -> UB

printf("'%p'\n"  , (void *)0  ) -> '0x0'
printf("'%.p'\n" , (void *)0  ) -> '0x'
printf("'%.0p'\n", (void *)123) -> UB

////////////////////////////////////////////////////////////////////////////////
// [2]

printf("'%s'\n"   , "foo") -> 'foo'
printf("'%.s'\n"  , "foo") -> ''
printf("'%.2s'\n" , "foo") -> 'fo'
printf("'%5.2s'\n", "foo") -> '   fo'

////////////////////////////////////////////////////////////////////////////////
// [3]

printf("'%x'\n" , 1) -> '1'
printf("'%#x'\n", 1) -> '0x1'
printf("'%#x'\n", 0) -> '0'

printf("'%X'\n" , 1) -> '1'
printf("'%#X'\n", 1) -> '0X1'
printf("'%#X'\n", 0) -> '0'

////////////////////////////////////////////////////////////////////////////////
// [4]

printf("'%2%'\n" ) -> ' %'
printf("'%-2%'\n") -> '% '
printf("'%02%'\n") -> '0%'

////////////////////////////////////////////////////////////////////////////////

*/

////////////////////////////////////////////////////////////////////////////////
